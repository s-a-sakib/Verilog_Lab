module BCD_Adder(A , B , S , Cout);
	input [4 : 1] A , B ;
	assign Cin = 1'b0;
	output [4 : 1] S;
	output Cout;
	wire C0 , Cignore;
	wire [4 : 1] S0 , B0;
	four_bit_AddSub fa1(A , B , Cin , S0 , C0);

	wire and_S4_S3 , and_S4_S2;
	and(and_S4_S3 , S0[4] , S0[3]);
	and(and_S4_S2 , S0[4] , S0[2]);

	or(Cout , C0 , and_S4_S3 , and_S4_S2);

	assign B0[4] = 1'b0;
	assign B0[1] = 1'b0;
	assign B0[2] = Cout;
	assign B0[3] = Cout;

	four_bit_AddSub fa2(B0 , S0 , Cin , S , Cignore);
endmodule

module BCD_Adder_Test;
	reg [4 : 1] a , b;
	wire [4 : 1] s;
	wire c;
	
	BCD_Adder BA(.A(a) , .B(b) , .S(s) , .Cout(c));

	initial begin	
	
	#0 a = 4'b0000; b = 4'b0000;
	#50 a = 4'b0001; b = 4'b0001; // 0000 0010
	#50 a = 4'b0010; b = 4'b0010; // 0000 0100	
	#50 a = 4'b0011; b = 4'b0011; // 0000 0110
	#50 a = 4'b0100; b = 4'b0100; // 0000 1000
	#50 a = 4'b0101; b = 4'b0101; // 0001 0000
	#50 a = 4'b0110; b = 4'b0110; // 0001 0010
	#50 a = 4'b0110; b = 4'b0111; // 0001 0011
	end
endmodule
